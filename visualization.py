# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PUQmE1AdVZZiSvHMvoCn9WPMXHeUsiuK
"""

import matplotlib.pyplot as plt

x = []
y = []

i = 0
flag = 0
with open('allfast.out', 'r') as f:
  for line in f.readlines():
    if "pA: " in line:
      start = line.index("pA: ")+4
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length]))

      i += 1

plt.plot(x, y, label="all fast")

x = []
y = []

i = 0
flag = 0
with open('allslow.out', 'r') as f:
  for line in f.readlines():
    if "pA: " in line:
      start = line.index("pA: ")+4
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length]))

      i += 1

plt.plot(x, y, label="all slow")

x = []
y = []

i = 0
flag = 0
with open('log.out', 'r') as f:
  for line in f.readlines():
    if "pA: " in line:
      start = line.index("pA: ")+4
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length]))

      i += 1

plt.plot(x, y, label="model")

plt.legend(loc="upper left")

plt.title('Calculated Package Drop Rate')
plt.xlabel('package seq #')
plt.ylabel('drop rate')

plt.show()

x = []
y = []
z = []

i = 0
flag = 0
with open('log.out', 'r') as f:
  for line in f.readlines():
    if "Tfast: " in line:
      start = line.index("Tfast: ")+7
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length])*1000)

      i += 1

    if "Tslow: " in line:
      start = line.index("Tslow: ")+7

      z.append(float(line[start:])*1000)

plt.plot(x, y, label="Tfast")
plt.plot(x, z, label="Tslow")

plt.legend(loc="upper left")

plt.title('Estimate Transmission Time on each Channel')
plt.xlabel('package seq #')
plt.ylabel('time (ms)')
plt.show()

x = ["all slow", "1000 package", "100 package", "all fast"]
y = [0, 0.034, 0.47, 0.50]


plt.bar(x, y)

plt.title('Overall Package Drop Rate')
plt.ylabel('drop rate')

x = ["all slow", "model", "all fast"]
y = [60, 20*(51+2)/53+60*2/53, 20]


plt.bar(x, y)

plt.title('Average Transmission Time')
plt.ylabel('time (ms)')

x = []
y = []
z = []

i = 0
xi = 0
yi = 0
flag = 0
with open('log.out', 'r') as f:
  for line in f.readlines():
    if "Sent fast path" in line:
      xi += 1
      x.append(i)
      y.append(xi)
      z.append(yi)

      i += 1

    if "Sent slow path" in line:
      yi += 1
      x.append(i)
      y.append(xi)
      z.append(yi)

      i += 1

# plt.ylim(0, 0.25)
plt.plot(x, y, label="Fast link")
plt.plot(x, z, label="Slow link")

plt.legend(loc="upper left")

plt.title('The Accumulate Number of Package Sent on each Link')
plt.xlabel('package seq #')
plt.ylabel('package sent #')
plt.show()

x = []
y = []

i = 0
flag = 0
with open('output1000.txt', 'r') as f:
  for line in f.readlines():
    if "pA: " in line:
      start = line.index("pA: ")+4
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length]))

      i += 1

plt.plot(x, y, label="model")

plt.legend(loc="upper left")

plt.title('Calculated Package Drop Rate (# = 1000)')
plt.xlabel('package seq #')
plt.ylabel('drop rate')

plt.show()

x = []
y = []
z = []

i = 0
flag = 0
with open('output2500.txt', 'r') as f:
  for line in f.readlines():
    if "Tfast: " in line:
      start = line.index("Tfast: ")+7
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length])*1000)

      i += 1

    if "Tslow: " in line:
      start = line.index("Tslow: ")+7

      z.append(float(line[start:])*1000)

# plt.ylim(0, 0.25)
plt.plot(x, y, label="Tfast")
plt.plot(x, z, label="Tslow")

plt.legend(loc="upper left")

plt.title('Estimate Transmission Time on each Channel')
plt.xlabel('package seq #')
plt.ylabel('time (ms)')
plt.show()

x = []
y = []
z = []

i = 0
xi = 0
yi = 0
flag = 0
with open('output2500.txt', 'r') as f:
  for line in f.readlines():
    if "Sent fast path" in line:
      xi += 1
      x.append(i)
      y.append(xi)
      z.append(yi)

      i += 1

    if "Sent slow path" in line:
      yi += 1
      x.append(i)
      y.append(xi)
      z.append(yi)

      i += 1

plt.plot(x, y, label="Fast link")
plt.plot(x, z, label="Slow link")

plt.legend(loc="upper left")

plt.title('The Accumulate Number of Package Sent on each Link')
plt.xlabel('package seq #')
plt.ylabel('package sent #')
plt.show()

x = []
y = []

i = 0
flag = 0
with open('output2500.txt', 'r') as f:
  for line in f.readlines():
    if "pA: " in line:
      start = line.index("pA: ")+4
      length = line[start:].index(",")

      x.append(i)
      y.append(float(line[start:start+length]))

      i += 1

plt.plot(x, y, label="model")

plt.legend(loc="upper left")

plt.title('Calculated Package Drop Rate (# = 2500)')
plt.xlabel('package seq #')
plt.ylabel('drop rate')

plt.show()

for seed in [1, 3, 4, 5, 6, 7, 8, 9, 10] :
  x = []
  y = []
  i = 0
  flag = 0
  with open('output100-'+str(seed)+'.txt', 'r') as f:
    for line in f.readlines():
      if "pA: " in line:
        start = line.index("pA: ")+4
        length = line[start:].index(",")

        x.append(i)
        y.append(float(line[start:start+length]))

        i += 1

  plt.plot(x, y, label="model")


plt.title('Calculated Package Drop Rate')
plt.xlabel('package seq #')
plt.ylabel('drop rate')

plt.show()

import random
ll =  [1, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(ll)
for seed in  ll:
  x = []
  y = []
  z = []

  i = 0
  flag = 0
  with open('output100-'+str(seed)+'.txt', 'r') as f:
    for line in f.readlines():
      if "Tfast: " in line:
        start = line.index("Tfast: ")+7
        length = line[start:].index(",")

        x.append(i)
        y.append(float(line[start:start+length])*1000)

        i += 1

      if "Tslow: " in line:
        start = line.index("Tslow: ")+7

        z.append(float(line[start:])*1000)

  plt.plot(x, y, label="Tfast")
  # plt.plot(x, z, label="Tslow")


plt.title('Estimate Transmission Time on fast Channel')
plt.xlabel('package seq #')
plt.ylabel('time (ms)')
plt.show()

